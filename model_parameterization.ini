[DEFAULT]
parameterization = testing
res = testing
datasetname = df

[1]
parameterization = 1
datasetname = df1
RGI_input = y
scale = g
size anomaly = 0
distance test = 9999
area scrubber = off

[2]
parameterization = 2
datasetname = df2
RGI_input = y
scale = g
size anomaly = 0.5
distance test = .5
area scrubber = on

[3]
parameterization = 3
datasetname = df3
RGI_input = y
scale = g
size anomaly = 0.75
distance test = 0.75
area scrubber = on

[4]
parameterization = 4
datasetname = df4
RGI_input = y
scale = g
distance test = 0
size anomaly = 1
area scrubber = on














# def select_dataset_coregistration(
#     pth='/home/prethicktor/data/',
#     parameterization='sm'
# ):
#     root_dir = pth

#     if parameterization == 'testing':
#         df = load_training_data(
#             root_dir = pth,
#             RGI_input = 'y',
#             scale = 'g',
# #             area_scrubber = 'on',
# #             anomaly_input = 0.5,
# #             data_version = 'v2'
#         )
#         df = df.drop([
#             'RGIId','region', 'RGI Centroid Distance', 
#             'AVG Radius', 'Roundness', 'distance test', 'size difference'
#                        ], axis = 1)
# #         df9['Area'] = df9['Area'] * 1e6
# #         df9['Area'] = np.log(df9['Area'])
# #         df9['Lmax'] = np.log(df9['Lmax'])
        
        
#         dataset = df
#         dataset.name = 'df'
#         res = 'testing'
        
#     if parameterization == '1':
#         df1 = load_training_data(
#             root_dir = pth,
#             RGI_input = 'y',
#             scale = 'g',
# #             area_scrubber = 'on',
# #             anomaly_input = .5,
# #             data_version = 'v2'
#         )
#         df1 = df1.drop([
#             'RGIId','region', 'RGI Centroid Distance', 
#             'AVG Radius', 'Roundness', 'distance test', 'size difference'
#                        ], axis = 1)
# #         df9['Area'] = df9['Area'] * 1e6
# #         df9['Area'] = np.log(df9['Area'])
# #         df9['Lmax'] = np.log(df9['Lmax'])
        
        
#         dataset = df1
#         dataset.name = 'df1'
#         res = '1'
        
#     if parameterization == '2':
#         df2 = load_training_data(
#             root_dir = pth,
#             RGI_input = 'y',
#             scale = 'g',
#             area_scrubber = 'on',
#             anomaly_input = .5,
# #             data_version = 'v2'
#         )
#         df2 = df2[df2['distance test'] <= 0.5]
#         df2 = df2.drop([
#             'RGIId','region', 'RGI Centroid Distance', 
#             'AVG Radius', 'Roundness', 'distance test', 'size difference'
#                        ], axis = 1)
# #         df9['Area'] = df9['Area'] * 1e6
# #         df9['Area'] = np.log(df9['Area'])
# #         df9['Lmax'] = np.log(df9['Lmax'])
        
        
#         dataset = df2
#         dataset.name = 'df2'
#         res = '2'
        
#     if parameterization == '3':
#         df3 = load_training_data(
#             root_dir = pth,
#             RGI_input = 'y',
#             scale = 'g',
#             area_scrubber = 'on',
#             anomaly_input = .75,
# #             data_version = 'v2'
#         )
#         df3 = df3[df3['distance test'] <= 0.75]

#         df3 = df3.drop([
#             'RGIId','region', 'RGI Centroid Distance', 
#             'AVG Radius', 'Roundness', 'distance test', 'size difference'
#                        ], axis = 1)
        
        
#         dataset = df3
#         dataset.name = 'df3'
#         res = '3'

        
#     return parameterization, dataset, dataset.name, res
